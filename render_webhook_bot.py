#!/usr/bin/env python3
"""
Bot Telegram avec webhook pour d√©ploiement Render.com
"""
import os
import logging
import json
import re
from flask import Flask, request, jsonify
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import launch_bot
from compteur import get_compteurs, update_compteurs, reset_compteurs_canal
from style import afficher_compteurs_canal

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(name)

# Flask app pour webhook
app = Flask(name)

# Variables globales
bot_app = None
style_affichage = 1
processed_messages = set()

def load_processed_messages():
    """Charge les messages trait√©s depuis le fichier"""
    global processed_messages
    try:
        with open("processed_messages.json", "r") as f:
            processed_messages = set(json.load(f))
    except:
        processed_messages = set()

def save_processed_messages():
    """Sauvegarde les messages trait√©s"""
    try:
        with open("processed_messages.json", "w") as f:
            json.dump(list(processed_messages), f)
    except:
        pass

def is_message_processed(message_key):
    """V√©rifie si un message a d√©j√† √©t√© trait√©"""
    return message_key in processed_messages

def mark_message_processed(message_key):
    """Marque un message comme trait√©"""
    processed_messages.add(message_key)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re les messages entrants et √©dit√©s"""
    global style_affichage
    
    try:
        # R√©cup√®re le message de n'importe quelle source
        msg = update.message or update.channel_post or update.edited_channel_post or update.edited_message
        if not msg or not msg.text:
            return
        
        text = msg.text
        chat_id = msg.chat_id
        
        # D√©tecte si c'est un message √©dit√©
        is_edited = update.edited_channel_post or update.edited_message
        
        logger.info(f"Canal {chat_id}: {'[EDIT√â] ' if is_edited else ''}{text[:80]}")
        
        # V√©rifie le num√©ro de message
        match_numero = re.search(r"#n(\d+)", text)
        if not match_numero:
            # Trouve les PREMI√àRES parenth√®ses seulement pour les messages sans num√©ro
            match = re.search(r'\(([^()]*)\)', text)
            if not match:
                return
            content = match.group(1)
        else:
            numero = int(match_numero.group(1))
            message_key = f"{chat_id}_{numero}"
            
            # V√©rifie les indicateurs de progression
            progress_indicators = ['‚è∞', '‚ñ∂', 'üïê', '‚û°Ô∏è']
            confirmation_symbols = ['‚úÖ', 'üî∞']
            
            has_progress = any(indicator in text for indicator in progress_indicators)
            has_confirmation = any(symbol in text for symbol in confirmation_symbols)
            
            # Si le message a des indicateurs de progression sans confirmation, attendre la version finale
            if has_progress and not has_confirmation:
                logger.info(f"Message #{numero} a des indicateurs de progression, attente de la version finale")
                return
            
            # Pour les messages finaux : v√©rifier si d√©j√† trait√© sauf si √©dit√©
            if is_message_processed(message_key):
                if not is_edited:
                    logger.info(f"Message #{numero} d√©j√† trait√© et non √©dit√©, ignor√©")
                    return
                else:
                    logger.info(f"Message #{numero} a √©t√© √©dit√©, retraitement...")
            
            # Marquer comme trait√©
            mark_message_processed(message_key)
            save_processed_messages()


# Trouve les PREMI√àRES parenth√®ses seulement
            match = re.search(r'\(([^()]*)\)', text)
            if not match:
                return
            content = match.group(1)
        
        logger.info(f"Canal {chat_id} - Contenu: '{content}'")
        
        # Compte TOUS les symboles de cartes dans le contenu
        cards_found = {}
        total_cards = 0
        
        # V√©rifie les coeurs (les deux symboles)
        heart_count = content.count("‚ù§Ô∏è") + content.count("‚ô•Ô∏è")
        if heart_count > 0:
            update_compteurs(chat_id, "‚ù§Ô∏è", heart_count)
            cards_found["‚ù§Ô∏è"] = heart_count
            total_cards += heart_count
        
        # V√©rifie les autres symboles
        for symbol in ["‚ô¶Ô∏è", "‚ô£Ô∏è", "‚ô†Ô∏è"]:
            count = content.count(symbol)
            if count > 0:
                update_compteurs(chat_id, symbol, count)
                cards_found[symbol] = count
                total_cards += count
        
        if not cards_found:
            logger.info(f"Aucun symbole de carte trouv√© dans: '{content}'")
            return
        
        logger.info(f"Canal {chat_id} - Cartes compt√©es: {cards_found}")
        
        # R√©cup√®re les compteurs mis √† jour et envoie la r√©ponse
        compteurs_updated = get_compteurs(chat_id)
        response = afficher_compteurs_canal(compteurs_updated, style_affichage)
        await msg.reply_text(response)
        logger.info(f"R√©ponse envoy√©e au canal {chat_id}")
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement du message: {e}")

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Commande de reset"""
    try:
        if not update.message:
            return
            
        chat_id = update.message.chat_id
        reset_compteurs_canal(chat_id)
        
        # Nettoie les messages trait√©s pour ce canal
        global processed_messages
        processed_messages = {key for key in processed_messages if not key.startswith(f"{chat_id}_")}
        save_processed_messages()
        
        await update.message.reply_text("‚úÖ Reset effectu√© pour ce canal")
        
    except Exception as e:
        logger.error(f"Erreur dans la commande reset: {e}")
